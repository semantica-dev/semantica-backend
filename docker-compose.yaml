# File: docker-compose.yaml

services:
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: semantica-rabbitmq
    ports:
      - "${RABBITMQ_HOST_AMQP_PORT:-5672}:5672"
      - "${RABBITMQ_HOST_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - semantica-network

  postgres:
    image: postgres:16-alpine
    container_name: semantica-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_HOST_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -q"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - semantica-network

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: semantica-minio
    ports:
      - "${MINIO_HOST_API_PORT:-9000}:9000"
      - "${MINIO_HOST_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - semantica-network

  orchestrator:
    container_name: semantica-orchestrator
    build:
      context: .
      dockerfile: ./build/orchestrator/Dockerfile
    ports:
      - "${ORCHESTRATOR_HOST_PORT:-8080}:8080"
    environment:
      RABBITMQ_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/"
      POSTGRES_DSN: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
      MIGRATIONS_DIR: ${MIGRATIONS_DIR:-/app/db/migrations}
      ORCHESTRATOR_API_PORT: ${ORCHESTRATOR_API_PORT:-:8080}
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-semantica-data}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      APP_MAX_RETRIES: ${APP_MAX_RETRIES:-5}
      APP_RETRY_INTERVAL: ${APP_RETRY_INTERVAL:-5s}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica-network

  worker-crawler:
    container_name: semantica-worker-crawler
    build:
      context: .
      dockerfile: ./build/worker-crawler/Dockerfile
    environment:
      RABBITMQ_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-semantica-data}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      APP_MAX_RETRIES: ${APP_MAX_RETRIES:-5}
      APP_RETRY_INTERVAL: ${APP_RETRY_INTERVAL:-5s}
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica-network

  worker-extractor-html:
    container_name: semantica-worker-extractor-html
    build:
      context: .
      dockerfile: ./build/worker-extractor-html/Dockerfile
    environment:
      RABBITMQ_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-semantica-data}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      APP_MAX_RETRIES: ${APP_MAX_RETRIES:-5}
      APP_RETRY_INTERVAL: ${APP_RETRY_INTERVAL:-5s}
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica-network

  worker-extractor-other:
    container_name: semantica-worker-extractor-other
    build:
      context: .
      dockerfile: ./build/worker-extractor-other/Dockerfile
    environment:
      RABBITMQ_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-semantica-data}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      APP_MAX_RETRIES: ${APP_MAX_RETRIES:-5}
      APP_RETRY_INTERVAL: ${APP_RETRY_INTERVAL:-5s}
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica-network

  worker-indexer-keywords:
    container_name: semantica-worker-indexer-keywords
    build:
      context: .
      dockerfile: ./build/worker-indexer-keywords/Dockerfile
    environment:
      RABBITMQ_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-semantica-data}
      POSTGRES_DSN: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      APP_MAX_RETRIES: ${APP_MAX_RETRIES:-5}
      APP_RETRY_INTERVAL: ${APP_RETRY_INTERVAL:-5s}
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica-network

  worker-indexer-embeddings:
    container_name: semantica-worker-indexer-embeddings
    build:
      context: .
      dockerfile: ./build/worker-indexer-embeddings/Dockerfile
    environment:
      RABBITMQ_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/"
      MINIO_ENDPOINT: "http://minio:9000"
      MINIO_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-semantica-data}
      # QDRANT_URL: "http://qdrant:6333"
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      APP_MAX_RETRIES: ${APP_MAX_RETRIES:-5}
      APP_RETRY_INTERVAL: ${APP_RETRY_INTERVAL:-5s}
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      # qdrant:
      #   condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica-network

volumes:
  rabbitmq-data:
    driver: local
  postgres-data:
    driver: local
  minio-data:
    driver: local

networks:
  semantica-network:
    driver: bridge
