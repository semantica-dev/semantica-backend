# File: docker-compose.yaml

services:
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: semantica-rabbitmq
    ports:
      - "${RABBITMQ_HOST_AMQP_PORT:-5672}:5672"
      - "${RABBITMQ_HOST_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - semantica_network

  postgres:
    image: postgres:16-alpine
    container_name: semantica-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_HOST_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -q"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - semantica_network

  orchestrator:
    container_name: semantica-orchestrator
    build:
      context: .
      dockerfile: ./build/orchestrator/Dockerfile
    ports:
      - "${ORCHESTRATOR_HOST_PORT:-8080}:${ORCHESTRATOR_INTERNAL_PORT_NUMBER:-8080}"
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@rabbitmq:5672/
      POSTGRES_DSN: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
      MIGRATIONS_DIR: ${MIGRATIONS_DIR:-/app/db/migrations}
      ORCHESTRATOR_API_PORT: ":${ORCHESTRATOR_INTERNAL_PORT_NUMBER:-8080}"
      # LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica_network

  worker-crawler:
    container_name: semantica-worker-crawler
    build:
      context: .
      dockerfile: ./build/worker-crawler/Dockerfile
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@rabbitmq:5672/
      # LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica_network

  worker-extractor-html: # <--- НОВЫЙ СЕРВИС
    container_name: semantica-worker-extractor-html
    build:
      context: .
      dockerfile: ./build/worker-extractor-html/Dockerfile
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@rabbitmq:5672/
      # LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica_network

  worker-extractor-other: # <--- НОВЫЙ СЕРВИС
    container_name: semantica-worker-extractor-other
    build:
      context: .
      dockerfile: ./build/worker-extractor-other/Dockerfile
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@rabbitmq:5672/
      # LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica_network

  worker-indexer-keywords: # <--- НОВЫЙ СЕРВИС
    container_name: semantica-worker-indexer-keywords
    build:
      context: .
      dockerfile: ./build/worker-indexer-keywords/Dockerfile
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@rabbitmq:5672/
      # LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica_network

  worker-indexer-embeddings: # <--- НОВЫЙ СЕРВИС
    container_name: semantica-worker-indexer-embeddings
    build:
      context: .
      dockerfile: ./build/worker-indexer-embeddings/Dockerfile
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@rabbitmq:5672/
      # LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - semantica_network

volumes:
  rabbitmq_data:
    driver: local
  postgres_data:
    driver: local

networks:
  semantica_network:
    driver: bridge
